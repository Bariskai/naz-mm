// =========================================================================
// MEVCUT KODLAR (Yazƒ± Animasyonu ve Kalp Efekti)
// =========================================================================
const yaziElementi = document.getElementById('yazi-animasyonu');
const tamYazi = "Seninle her an bir macera, Naz. Hayatƒ±mdaki en g√ºzel ≈üeysin!";
let indeks = 0;

function yaziyiYaz() {
    if (indeks < tamYazi.length) {
        yaziElementi.innerHTML += tamYazi.charAt(indeks);
        indeks++;
        setTimeout(yaziyiYaz, 70); // 70ms aralƒ±klarla harf yaz
    } else {
        // Yazƒ± bittiƒüinde kalpleri g√∂stermeye ba≈üla
        setInterval(kalpUcur, 500); 
    }
}

function kalpUcur() {
    const kalp = document.createElement('span');
    kalp.innerHTML = '‚ù§Ô∏è'; // Kƒ±rmƒ±zƒ± kalp
    kalp.classList.add('floating-heart'); // CSS i√ßin sƒ±nƒ±f ekle
    kalp.style.left = Math.random() * 100 + 'vw';
    kalp.style.bottom = '0px'; 
    document.body.appendChild(kalp);
    
    setTimeout(() => {
        kalp.remove();
    }, 5000);
}

const kalpButonu = document.getElementById('kalp-butonu');
kalpButonu.addEventListener('click', () => {
    alert("Bize √∂zel bir sƒ±r: Seni √áOK seviyorum!");
    
    const kalp = document.createElement('span');
    kalp.innerHTML = 'üíñ';
    kalp.style.fontSize = '3em';
    kalp.style.position = 'absolute';
    // Kalp pozisyonunu dinamik olarak ayarlamak daha iyi
    const rect = kalpButonu.getBoundingClientRect();
    kalp.style.top = (rect.top + window.scrollY - 50) + 'px';
    kalp.style.left = (rect.left + window.scrollX + rect.width / 2) + 'px';
    kalp.style.transform = 'translateX(-50%)'; 
    
    document.body.appendChild(kalp);
    
    setTimeout(() => {
        kalp.remove();
    }, 1000);
});

// Sayfa y√ºklendiƒüinde animasyonu ba≈ülat
window.onload = function() {
    yaziyiYaz();
    // NOT: Arama kodu kendi onload olayƒ±nƒ± kullanmayacak, doƒürudan √ßalƒ±≈üacak.
};

// =========================================================================
// YENƒ∞ SESLƒ∞ ARAMA KODU (WebRTC/PeerJS)
// =========================================================================

// Sesli Arama i√ßin Gerekli √ñƒüeler
const localAudio = document.getElementById('localAudio');
const remoteAudio = document.getElementById('remoteAudio');
const callButton = document.getElementById('callButton');
const endCallButton = document.getElementById('endCallButton');
const peerIdDisplay = document.getElementById('peerId');
const remotePeerIdInput = document.getElementById('remotePeerId');
const statusDisplay = document.getElementById('status'); 

// YENƒ∞: Saya√ß √ñƒüeleri
const callTimerContainer = document.getElementById('callTimerContainer');
const callTimerDisplay = document.getElementById('callTimer');
let callTimerInterval = null; // Sayacƒ±n setInterval kimliƒüini tutar
let callStartTime = 0; // Aramanƒ±n ba≈üladƒ±ƒüƒ± zamanƒ± (timestamp) tutar


// Tarayƒ±cƒ± Desteƒüi Kontrol√º
if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    statusDisplay.textContent = 'Tarayƒ±cƒ± desteklenmiyor!';
    alert('Sesli arama i√ßin g√ºncel bir tarayƒ±cƒ± (Chrome, Firefox, Safari) kullanƒ±n.');
}

// 1. PeerJS Baƒülantƒ±sƒ±nƒ± Kurma (Sunucu Denemeleri ve G√ºvenilir Ayarlar)
const peer = new Peer({
    host: '0.peerjs.com', 
    port: 443, 
    path: '/',
    secure: true,
    // Sunucudan yanƒ±t gelmezse yeniden denemesi i√ßin ek ayarlar
    config: { 'iceServers': [ { 'urls': 'stun:stun.l.google.com:19302' } ] } 
});
let localStream;
let currentCall = null; 

peer.on('open', (id) => {
    peerIdDisplay.value = id;
    statusDisplay.textContent = 'Hazƒ±r. Sizin ID: ' + id;
});

peer.on('error', (err) => {
    console.error("PeerJS Hatasƒ±:", err);
    statusDisplay.textContent = 'HATA: Baƒülantƒ± kurulamadƒ±. Sayfayƒ± yenileyin.';
    callButton.disabled = true; // Hata varsa aramayƒ± engelle
});

// =========================================================================
// YENƒ∞: ARAMA SAYACI FONKSƒ∞YONLARI
// =========================================================================

function startCallTimer() {
    // Zaten √ßalƒ±≈üan bir saya√ß varsa temizle
    if (callTimerInterval) {
        clearInterval(callTimerInterval);
    }
    
    callTimerContainer.style.display = 'block'; // Sayacƒ± g√∂r√ºn√ºr yap
    callStartTime = Date.now(); // Ba≈ülangƒ±√ß zamanƒ±nƒ± kaydet

    callTimerInterval = setInterval(() => {
        const elapsed = Date.now() - callStartTime;
        const totalSeconds = Math.floor(elapsed / 1000);
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        
        // MM:SS formatƒ± i√ßin '0' ile doldurma
        const formattedMinutes = String(minutes).padStart(2, '0');
        const formattedSeconds = String(seconds).padStart(2, '0');
        
        callTimerDisplay.textContent = `${formattedMinutes}:${formattedSeconds}`;
    }, 1000); // Her saniye g√ºncelle
}

function stopCallTimer() {
    if (callTimerInterval) {
        clearInterval(callTimerInterval);
        callTimerInterval = null;
    }
    callTimerContainer.style.display = 'none'; // Sayacƒ± gizle
    callTimerDisplay.textContent = '00:00'; // Sayacƒ± sƒ±fƒ±rla
}


// 2. Mikrofon Eri≈üimi
navigator.mediaDevices.getUserMedia({ video: false, audio: true })
    .then(stream => {
        localStream = stream;
        localAudio.srcObject = stream;
        statusDisplay.textContent = 'Mikrofon Hazƒ±r.';
    })
    .catch(err => {
        console.error("Mikrofon eri≈üimi ba≈üarƒ±sƒ±z oldu:", err);
        statusDisplay.textContent = 'Arama i√ßin Mƒ∞KROFON ƒ∞ZNƒ∞ vermeniz gerekiyor!';
        callButton.disabled = true; 
    });


// 3. Arama Ba≈ülatma (Siz, Naz'ƒ± aradƒ±ƒüƒ±nƒ±zda)
callButton.addEventListener('click', () => {
    const remoteId = remotePeerIdInput.value;
    if (!remoteId || !localStream) {
        alert("Naz'ƒ±n ID'sini girin ve mikrofonun hazƒ±r olduƒüundan emin olun.");
        return;
    }

    statusDisplay.textContent = 'Naz aranƒ±yor...';
    
    const call = peer.call(remoteId, localStream);
    currentCall = call;

    call.on('stream', (remoteStream) => {
        remoteAudio.srcObject = remoteStream;
        statusDisplay.textContent = 'Arama Baƒülandƒ±.';
        startCallTimer(); // SAYA√á BA≈ûLAT
    });

    call.on('close', () => {
        statusDisplay.textContent = 'Arama Sonlandƒ±.';
        endCall();
    });

    callButton.disabled = true;
    endCallButton.disabled = false;
});


// 4. Aramayƒ± Cevaplama (Naz, Sizi aradƒ±ƒüƒ±nda)
peer.on('call', (call) => {
    // Sayfada √ßƒ±kan confirm yerine daha zarif bir ≈üey kullanmalƒ±sƒ±nƒ±z.
    const onay = confirm("Naz sizi arƒ±yor. Cevaplamak ister misiniz?"); 
    if (onay) {
        currentCall = call;
        call.answer(localStream);
        statusDisplay.textContent = 'Arama Baƒülandƒ±.';

        call.on('stream', (remoteStream) => {
            remoteAudio.srcObject = remoteStream;
            startCallTimer(); // SAYA√á BA≈ûLAT
        });
        
        call.on('close', () => {
            statusDisplay.textContent = 'Arama Sonlandƒ±.';
            endCall();
        });

        callButton.disabled = true;
        endCallButton.disabled = false;
    } else {
        call.close();
    }
});


// 5. Aramayƒ± Sonlandƒ±rma Fonksiyonu
function endCall() {
    stopCallTimer(); // SAYA√á DURDUR

    if (currentCall) {
        currentCall.close();
        currentCall = null;
    }
    // Mikrofon akƒ±≈ülarƒ±nƒ± durdur
    if (localStream) {
        localStream.getTracks().forEach(track => {
            if (track.kind === 'audio') {
                 track.stop();
            }
        });
    }

    // Basit√ße sayfayƒ± yenilemek en g√ºvenli y√∂ntemdir
    window.location.reload(); 
}

endCallButton.addEventListener('click', endCall);
